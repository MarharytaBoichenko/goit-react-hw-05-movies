{"version":3,"sources":["apiHelpers/api.js","helpers/mapper.js","components/ListOnSearch/ListOnSearch.js","components/ListOnSearch/ListOnSearch.module.css","components/SearchForm/SearchForm.module.css","components/SearchForm/SearchForm.js","views/MoviesPage/MoviesPage.js"],"names":["URL","KEY","api","fetchTrendFilms","query","fetch","then","response","ok","json","Promise","reject","Error","fetchFilmsOnQuery","fetchFilmById","movieId","fetchFilmCredits","fetchFilmReviews","mapper","films","map","film","named","name","title","ListOnSearch","console","log","className","s","list","id","to","item","module","exports","SearchForm","onSubmit","useState","setQuery","useSearchParams","setSearchParams","e","preventDefault","trim","toast","params","form","type","value","placeholder","onChange","target","input","button","MoviesPage","queryFilms","setQueryFilms","setFilms","setError","loading","setLoading","searchParams","searchQuery","get","useEffect","fetchOnQuery","data","results","length","correctFilms","catch","error","searchData","Loading"],"mappings":"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","file":"static/js/MoviesPage.816ff1dc.chunk.js","sourcesContent":["const URL = 'https://api.themoviedb.org/3/';\nconst KEY = '3235240fde1a44b4e45cd09b4117d7e1';\n\nfunction fetchTrendFilms(query) {\n  return fetch(`${URL}trending/all/day?api_key=${KEY}`).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`Film  not found`));\n  });\n}\n\nfunction fetchFilmsOnQuery(query) {\n  return fetch(\n    `${URL}search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${query}&page=1`,\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`Film  not found`));\n  });\n}\nfunction fetchFilmById(movieId) {\n  return fetch(`\n${URL}movie/${movieId}?api_key=${KEY}&language=en-US`).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`Film  not found`));\n  });\n}\nfunction fetchFilmCredits(movieId) {\n  return fetch(`\n${URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`).then(\n    response => {\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(new Error(`No data  found`));\n    },\n  );\n}\nfunction fetchFilmReviews(movieId) {\n  return fetch(\n    `${URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`,\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`No data  found`));\n  });\n}\nconst api = {\n  fetchTrendFilms,\n  fetchFilmsOnQuery,\n  fetchFilmById,\n  fetchFilmCredits,\n  fetchFilmReviews,\n};\n\nexport default api;\n","export const mapper = films => {\n  films.map(film => {\n    film.named = film.name ? film.name : film.title;\n\n    // console.log(film.named);\n    return film.named;\n  });\n};\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport s from './ListOnSearch.module.css';\n\nexport default function ListOnSearch({ films }) {\n  console.log(films);\n  return (\n    <ul className={s.list}>\n      {films.map(({ id, named }) => (\n        <Link key={id} to={`/movies/${id}`}>\n          <li className={s.item}>{named}</li>\n        </Link>\n      ))}\n    </ul>\n  );\n}\n\nListOnSearch.propTypes = {\n  films: PropTypes.arrayOf(PropTypes.object),\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ListOnSearch_item__1dqI2\",\"list\":\"ListOnSearch_list__luddA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"SearchForm_form__qWosj\",\"input\":\"SearchForm_input__zWLnu\",\"button\":\"SearchForm_button__1AUaN\"};","import { toast } from 'react-toastify';\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport s from '../SearchForm/SearchForm.module.css';\n\nexport default function SearchForm({ onSubmit }) {\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const onChangeHandler = e => {\n    console.log(e.target.value);\n    setQuery(e.target.value);\n  };\n  const onFormSubmitHandler = e => {\n    e.preventDefault();\n    if (query.trim() === '') {\n      toast('Enter your  query');\n    }\n    ////set  params  of search  to url\n    const params = {};\n    params.query = query;\n    setSearchParams(params);\n    /////[хук  ???????  на странице  списка поиска\n\n    console.log('got  query  pass query  to moviepage');\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <form onSubmit={onFormSubmitHandler} className={s.form}>\n      <label>\n        <input\n          type=\"text\"\n          value={query}\n          placeholder=\"Enter  your query\"\n          onChange={onChangeHandler}\n          className={s.input}\n        />\n      </label>\n      <button type=\"submit\" className={s.button}>\n        Search\n      </button>\n    </form>\n  );\n}\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","import { useState, useEffect } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport SearchForm from '../../components/SearchForm/SearchForm';\nimport ListOnSearch from '../../components/ListOnSearch/ListOnSearch';\nimport api from '../../apiHelpers/api';\nimport { mapper } from '../../components/../helpers/mapper';\nimport { toast } from 'react-toastify';\nimport Loading from '../../components/Loader/Loading';\n// import Loader from 'react-loader-spinner';\n// import 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nexport default function MoviesPage() {\n  const [queryFilms, setQueryFilms] = useState('');\n  const [films, setFilms] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const handleSearchSubmit = searchData => {\n    setQueryFilms(searchData);\n    console.log(searchData);\n  };\n  const searchQuery = searchParams.get('query') || '';\n\n  useEffect(() => {\n    console.log(searchQuery);\n    if (!searchQuery) {\n      return;\n    }\n    fetchOnQuery(searchQuery);\n  }, []);\n\n  useEffect(() => {\n    if (queryFilms === '') {\n      return;\n    }\n    console.log('запрос изменился ');\n    fetchOnQuery(queryFilms);\n  }, [queryFilms]);\n\n  const fetchOnQuery = queryFilms => {\n    const { fetchFilmsOnQuery } = api;\n    if (!queryFilms) {\n      return;\n    }\n    console.log('query  film for render');\n    setLoading(true);\n    fetchFilmsOnQuery(queryFilms)\n      .then(data => {\n        if (data.results.length === 0) {\n          console.log('no  films');\n          toast('No  films  found');\n          return;\n        }\n        console.log(data.results);\n        const correctFilms = mapper(data.results);\n\n        console.log(correctFilms);\n        // setFilms(mapper(data.results));\n\n        setFilms(data.results);\n        setLoading(false);\n        setSearchParams({ query: searchQuery });\n      })\n      .catch(error => setError(error));\n  };\n  // const style = {\n  //   position: 'fixed',\n  //   top: '50%',\n  //   left: '50%',\n  //   transform: 'translate(-50%, -50%)',\n  //   zIndex: '99',\n  // };\n\n  return (\n    <>\n      <SearchForm onSubmit={handleSearchSubmit} />\n      {loading && <Loading />}\n      {films && <ListOnSearch films={films} />}\n    </>\n  );\n}\n"],"sourceRoot":""}