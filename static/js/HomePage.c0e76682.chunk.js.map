{"version":3,"sources":["apiHelpers/api.js","helpers/mapper.js","components/ListOnSearch/ListOnSearch.js","components/ListOnSearch/ListOnSearch.module.css","views/HomePage/HomePage.js"],"names":["URL","KEY","api","fetchTrendFilms","query","fetch","then","response","ok","json","Promise","reject","Error","fetchFilmsOnQuery","fetchFilmById","movieId","fetchFilmCredits","fetchFilmReviews","mapper","films","map","film","named","name","title","ListOnSearch","console","log","className","s","list","id","to","item","module","exports","HomePage","useState","setFilms","useEffect","data","results"],"mappings":"yIAAA,IAAMA,EAAM,gCACNC,EAAM,mCAmDZ,IAAMC,EAAM,CACVC,gBAlDF,SAAyBC,GACvB,OAAOC,MAAM,GAAD,OAAIL,EAAJ,oCAAmCC,IAAOK,MAAK,SAAAC,GACzD,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,wBA8CxBC,kBA1CF,SAA2BT,GACzB,OAAOC,MAAM,GAAD,OACPL,EADO,gCACoBC,EADpB,4DAC2EG,EAD3E,YAEVE,MAAK,SAAAC,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,wBAoCxBE,cAjCF,SAAuBC,GACrB,OAAOV,MAAM,KAAD,OACZL,EADY,iBACAe,EADA,oBACmBd,EADnB,oBACyCK,MAAK,SAAAC,GACxD,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,wBA4BxBI,iBAzBF,SAA0BD,GACxB,OAAOV,MAAM,KAAD,OACZL,EADY,iBACAe,EADA,4BAC2Bd,EAD3B,oBACiDK,MAC3D,SAAAC,GACE,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,uBAmB1BK,iBAfF,SAA0BF,GACxB,OAAOV,MAAM,GAAD,OACPL,EADO,iBACKe,EADL,4BACgCd,EADhC,2BAEVK,MAAK,SAAAC,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,wBAWXV,O,gCC5Df,kCAAO,IAAMgB,EAAS,SAAAC,GACpBA,EAAMC,KAAI,SAAAC,GAIR,OAHAA,EAAKC,MAAQD,EAAKE,KAAOF,EAAKE,KAAOF,EAAKG,MAGnCH,EAAKC,W,gCCLhB,qEAIe,SAASG,EAAT,GAAkC,IAAVN,EAAS,EAATA,MAErC,OADAO,QAAQC,IAAIR,GAEV,oBAAIS,UAAWC,IAAEC,KAAjB,SACGX,EAAMC,KAAI,gBAAGW,EAAH,EAAGA,GAAIT,EAAP,EAAOA,MAAP,OACT,cAAC,IAAD,CAAeU,GAAE,kBAAaD,GAA9B,SACE,oBAAIH,UAAWC,IAAEI,KAAjB,SAAwBX,KADfS,U,mBCRnBG,EAAOC,QAAU,CAAC,KAAO,2BAA2B,KAAO,6B,gICI5C,SAASC,IACtB,MAA0BC,mBAAS,IAAnC,mBAAOlB,EAAP,KAAcmB,EAAd,KAeA,OAbAC,qBAAU,WACRrC,IAAIC,kBAAkBG,MAAK,SAAAkC,GACzB,IAAQC,EAAYD,EAAZC,QACRf,QAAQC,IAAIc,GACSvB,YAAOuB,GAI5BH,EAASG,QAEV,IAGI,mCAAGtB,GAAS,cAAC,IAAD,CAAcA,MAAOA","file":"static/js/HomePage.c0e76682.chunk.js","sourcesContent":["const URL = 'https://api.themoviedb.org/3/';\nconst KEY = '3235240fde1a44b4e45cd09b4117d7e1';\n\nfunction fetchTrendFilms(query) {\n  return fetch(`${URL}trending/all/day?api_key=${KEY}`).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`Film  not found`));\n  });\n}\n\nfunction fetchFilmsOnQuery(query) {\n  return fetch(\n    `${URL}search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${query}&page=1`,\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`Film  not found`));\n  });\n}\nfunction fetchFilmById(movieId) {\n  return fetch(`\n${URL}movie/${movieId}?api_key=${KEY}&language=en-US`).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`Film  not found`));\n  });\n}\nfunction fetchFilmCredits(movieId) {\n  return fetch(`\n${URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`).then(\n    response => {\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(new Error(`No data  found`));\n    },\n  );\n}\nfunction fetchFilmReviews(movieId) {\n  return fetch(\n    `${URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`,\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`No data  found`));\n  });\n}\nconst api = {\n  fetchTrendFilms,\n  fetchFilmsOnQuery,\n  fetchFilmById,\n  fetchFilmCredits,\n  fetchFilmReviews,\n};\n\nexport default api;\n","export const mapper = films => {\n  films.map(film => {\n    film.named = film.name ? film.name : film.title;\n\n    // console.log(film.named);\n    return film.named;\n  });\n};\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport s from './ListOnSearch.module.css';\n\nexport default function ListOnSearch({ films }) {\n  console.log(films);\n  return (\n    <ul className={s.list}>\n      {films.map(({ id, named }) => (\n        <Link key={id} to={`/movies/${id}`}>\n          <li className={s.item}>{named}</li>\n        </Link>\n      ))}\n    </ul>\n  );\n}\n\nListOnSearch.propTypes = {\n  films: PropTypes.arrayOf(PropTypes.object),\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ListOnSearch_item__1dqI2\",\"list\":\"ListOnSearch_list__luddA\"};","import { useState, useEffect } from 'react';\nimport api from '../../apiHelpers/api';\nimport { mapper } from '../../helpers/mapper';\nimport ListOnSearch from '../../components/ListOnSearch/ListOnSearch';\n\nexport default function HomePage() {\n  const [films, setFilms] = useState([]);\n\n  useEffect(() => {\n    api.fetchTrendFilms().then(data => {\n      const { results } = data;\n      console.log(results);\n      const correctFilms = mapper(results);\n\n      // console.log(correctFilms);\n      //   setFilms(mapper(results));\n      setFilms(results);\n    });\n  }, []);\n  //делает  запрос на трендовые фильмы  и рендерит список\n\n  return <>{films && <ListOnSearch films={films} />}</>;\n}\n"],"sourceRoot":""}