{"version":3,"sources":["apiHelpers/api.js","components/Reviews/Reviews.module.css","components/Reviews/Reviews.js"],"names":["URL","KEY","api","fetchTrendFilms","query","fetch","then","response","ok","json","Promise","reject","Error","fetchFilmsOnQuery","fetchFilmById","movieId","fetchFilmCredits","fetchFilmReviews","module","exports","Reviews","useState","reviews","setReviews","setLoading","id","useParams","useEffect","data","console","log","results","length","map","review","className","s","author","content"],"mappings":"yIAAA,IAAMA,EAAM,gCACNC,EAAM,mCAmDZ,IAAMC,EAAM,CACVC,gBAlDF,SAAyBC,GACvB,OAAOC,MAAM,GAAD,OAAIL,EAAJ,oCAAmCC,IAAOK,MAAK,SAAAC,GACzD,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,wBA8CxBC,kBA1CF,SAA2BT,GACzB,OAAOC,MAAM,GAAD,OACPL,EADO,gCACoBC,EADpB,4DAC2EG,EAD3E,YAEVE,MAAK,SAAAC,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,wBAoCxBE,cAjCF,SAAuBC,GACrB,OAAOV,MAAM,KAAD,OACZL,EADY,iBACAe,EADA,oBACmBd,EADnB,oBACyCK,MAAK,SAAAC,GACxD,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,wBA4BxBI,iBAzBF,SAA0BD,GACxB,OAAOV,MAAM,KAAD,OACZL,EADY,iBACAe,EADA,4BAC2Bd,EAD3B,oBACiDK,MAC3D,SAAAC,GACE,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,uBAmB1BK,iBAfF,SAA0BF,GACxB,OAAOV,MAAM,GAAD,OACPL,EADO,iBACKe,EADL,4BACgCd,EADhC,2BAEVK,MAAK,SAAAC,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAJ,wBAWXV,O,mBC3DfgB,EAAOC,QAAU,CAAC,OAAS,wBAAwB,QAAU,2B,wICI9C,SAASC,IACtB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,oBAAS,GAAvC,mBAAgBG,GAAhB,WACQC,EAAOC,cAAPD,GAcR,OAZAE,qBAAU,WACG,KAAPF,IAGJD,GAAW,GACXtB,IAAIe,iBAAiBQ,GAAInB,MAAK,SAAAsB,GAC5BC,QAAQC,IAAIF,EAAKG,SACjBR,EAAWK,EAAKG,SAChBP,GAAW,SAEZ,CAACC,IAGF,mCACGH,EAAQU,OAAS,EAChB,6BACGV,EAAQW,KAAI,SAAAC,GAAM,OACjB,+BACE,mBAAGC,UAAWC,IAAEC,OAAhB,SAAyBH,EAAOG,SAChC,mBAAGF,UAAWC,IAAEE,QAAhB,SAA0BJ,EAAOI,YAF1BJ,EAAOT,SAOpB","file":"static/js/Reviews.6d9175b4.chunk.js","sourcesContent":["const URL = 'https://api.themoviedb.org/3/';\nconst KEY = '3235240fde1a44b4e45cd09b4117d7e1';\n\nfunction fetchTrendFilms(query) {\n  return fetch(`${URL}trending/all/day?api_key=${KEY}`).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`Film  not found`));\n  });\n}\n\nfunction fetchFilmsOnQuery(query) {\n  return fetch(\n    `${URL}search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${query}&page=1`,\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`Film  not found`));\n  });\n}\nfunction fetchFilmById(movieId) {\n  return fetch(`\n${URL}movie/${movieId}?api_key=${KEY}&language=en-US`).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`Film  not found`));\n  });\n}\nfunction fetchFilmCredits(movieId) {\n  return fetch(`\n${URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`).then(\n    response => {\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(new Error(`No data  found`));\n    },\n  );\n}\nfunction fetchFilmReviews(movieId) {\n  return fetch(\n    `${URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`,\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error(`No data  found`));\n  });\n}\nconst api = {\n  fetchTrendFilms,\n  fetchFilmsOnQuery,\n  fetchFilmById,\n  fetchFilmCredits,\n  fetchFilmReviews,\n};\n\nexport default api;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"author\":\"Reviews_author__XYAUs\",\"content\":\"Reviews_content__1z1C7\"};","import api from '../../apiHelpers/api';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport s from './Reviews.module.css';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { id } = useParams();\n\n  useEffect(() => {\n    if (id === '') {\n      return;\n    }\n    setLoading(true);\n    api.fetchFilmReviews(id).then(data => {\n      console.log(data.results);\n      setReviews(data.results);\n      setLoading(false);\n    });\n  }, [id]);\n\n  return (\n    <>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(review => (\n            <li key={review.id}>\n              <p className={s.author}>{review.author}</p>\n              <p className={s.content}>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>We do not have any reviews for this movie</p>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}